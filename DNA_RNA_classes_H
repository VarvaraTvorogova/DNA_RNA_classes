class Dna(str):
    DNAdict = {'A':'T', 'T':'A', 'G':'C', 'C':'G', 'R':'Y', 'Y':'R', 'M':'K', 'K':'M', 'S':'S', 'W':'W', 'H':'D', 'D':'H', 'B':'V', 'V':'B', 'N':'N'}
    
    def __init__(self, DNA):
        DNA = DNA.upper()
        for i in DNA:
            if i not in Dna.DNAdict:
                raise ValueError ('Your string contains non-DNA symbols. Permitted symbols are: A, T, G, C, R, Y, M, K, S, W, H, D, B, V, N')
    
    def gc(self):
        gccounter = 0
        DNAlen = len(self)
        DNA = self.upper()
        for i in DNA:
            if str(i) in ['G', 'C', 'S']:
                gccounter += 1
            elif str(i) in ['R', 'Y', 'M', 'K', 'H', 'D', 'B', 'V', 'N']:
                DNAlen = DNAlen - 1
        try:    
            return (gccounter / DNAlen)
        except ZeroDivisionError:
            return (None)
            
    def reverse_complement(self):
        DNA = self.upper()
        Complement_list = []
        for i in DNA:
            Complement_list.append(Dna.DNAdict[i])
        Complement_list.reverse()
        return (Dna(''.join(Complement_list)))
    
    def transcribe (self):
        DNA = self.upper()
        RNA = Rna(DNA.replace('T', 'U'))
        return (RNA)
        
class Rna(str):
    RNAdict = {'A':'U', 'U':'A', 'G':'C', 'C':'G', 'R':'Y', 'Y':'R', 'M':'K', 'K':'M', 'S':'S', 'W':'W', 'H':'D', 'D':'H', 'B':'V', 'V':'B', 'N':'N'}    
    
    def __init__(self, RNA):
        RNA = self.upper()
        for i in RNA:
            if str(i) not in Rna.RNAdict:
                raise ValueError ('Your string contains non-RNA symbols. Permitted symbols are: A, U, G, C, R, Y, M, K, S, W, H, D, B, V, N')
    
    def gc(self):
        gccounter = 0
        RNAlen = len(self)
        RNA = self.upper()
        for i in RNA:
            if str(i) in ['G', 'C', 'S']:
                gccounter += 1
            elif str(i) in ['R', 'Y', 'M', 'K', 'H', 'D', 'B', 'V', 'N']:
                RNAlen = RNAlen - 1
        try:    
            return (gccounter / RNAlen)
        except ZeroDivisionError:
            return (None)
            
    def reverse_complement(self):
        RNA = self.upper()
        Complement_list = []
        for i in RNA:
            Complement_list.append(Rna.RNAdict[i])
        Complement_list.reverse()
        return (Rna(''.join(Complement_list)))
