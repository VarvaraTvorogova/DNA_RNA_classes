class Dna(str):
    dna_dict = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G', 'R': 'Y', 'Y': 'R', 'M': 'K', 'K': 'M', 'S': 'S', 'W': 'W', 'H': 'D', 'D': 'H', 'B': 'V', 'V': 'B', 'N': 'N'}

    def __init__(self, dna):
        self.dna = dna.upper()
        for i in self.dna:
            if i not in Dna.dna_dict:
                raise ValueError('Your string contains non-DNA symbols. Permitted symbols are: A, T, G, C, R, Y, M, K, S, W, H, D, B, V, N')

    def gc(self):
        gc_counter = 0
        dna_len = len(self)
        for i in self.dna:
            if i in ['G', 'C', 'S']:
                gc_counter += 1
            elif i in ['R', 'Y', 'M', 'K', 'H', 'D', 'B', 'V', 'N']:
                dna_len = dna_len - 1
        try:
            return round(gc_counter / dna_len, 2)
        except ZeroDivisionError:
            return None

    def reverse_complement(self):
        complement_list = []
        for i in self.dna:
            complement_list.append(Dna.dna_dict[i])
        complement_list.reverse()
        return Dna(''.join(complement_list))

    def transcribe(self):
        rna = Rna(self.dna.replace('T', 'U'))
        return rna


class Rna(str):
    rna_dict = {'A': 'U', 'U': 'A', 'G': 'C', 'C': 'G', 'R': 'Y', 'Y': 'R', 'M': 'K', 'K': 'M', 'S': 'S', 'W': 'W', 'H': 'D', 'D': 'H', 'B': 'V', 'V': 'B', 'N': 'N'}

    def __init__(self, rna):
        self.rna = rna.upper()
        for i in self.rna:
            if i not in Rna.rna_dict:
                raise ValueError('Your string contains non-RNA symbols. Permitted symbols are: A, U, G, C, R, Y, M, K, S, W, H, D, B, V, N')

    def gc(self):
        gc_counter = 0
        rna_len = len(self)
        for i in self.rna:
            if i in ['G', 'C', 'S']:
                gc_counter += 1
            elif i in ['R', 'Y', 'M', 'K', 'H', 'D', 'B', 'V', 'N']:
                rna_len = rna_len - 1
        try:
            return round(gc_counter / rna_len, 2)
        except ZeroDivisionError:
            return None

    def reverse_complement(self):
        complement_list = []
        for i in self.rna:
            complement_list.append(Rna.rna_dict[i])
        complement_list.reverse()
        return Rna(''.join(complement_list))
